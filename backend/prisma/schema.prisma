// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int        @id @default(autoincrement())
  firstName  String
  lastName   String
  birthDate  DateTime   @db.Date
  accounts   UserAccount[]
  messages   Message[]
  biography  Biography?
  chats      ChatMember[]
}

model UserAccount {
  idAccount Int    @id @default(autoincrement())
  userId    Int
  username  String @unique
  email     String @unique
  password  String
  user      User   @relation(fields: [userId], references: [id])

  @@map("user_accounts")  // Nome della tabella se diverso
}

model Message {
  id         Int      @id @default(autoincrement())
  userId     Int
  messageText String  @db.Text
  sentAt     DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])

  @@map("messages") // Nome della tabella se diverso
}

model Chat {
  id        Int          @id @default(autoincrement())
  chatName  String
  createdAt DateTime     @default(now())
  members   ChatMember[]

  @@map("chats") // Nome della tabella se diverso
}

model ChatMember {
  id       Int     @id @default(autoincrement())
  userId   Int
  chatId   Int
  joinedAt DateTime @default(now())
  user     User    @relation(fields: [userId], references: [id])
  chat     Chat    @relation(fields: [chatId], references: [id])

  @@map("chat_members") // Nome della tabella se diverso
}

model Biography {
  id        Int    @id @default(autoincrement())
  userId    Int @unique
  biography String
  user      User   @relation(fields: [userId], references: [id])

  @@map("biographies") // Nome della tabella se diverso
}
